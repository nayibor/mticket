{
  "name": "mysql-client",
  "description": "A full-featured mysql client for node",
  "version": "0.3.0",
  "repository": {
    "type": "git",
    "url": "http://github.com/Sebmaster/mysqlcl"
  },
  "author": {
    "name": "Sebastian Mayr"
  },
  "main": "./lib/Connection.js",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.3.1"
  },
  "readme": "MySQL Client for node.js\r\n===\r\n\r\nThis MySQL implementation supports some basic MySQL protocol commands. I plan to support the full MySQL protocol except the deprecated parts.\r\n\r\nBasic Usage\r\n---\r\n\tvar Connection = require('./lib/Connection').Connection;\r\n\tvar myCon = new Connection('user', 'pass');\r\n\t\r\n\tmyCon.on('authenticated', function() {\r\n\t\tmyCon.selectDb('test'); // Even tough the querys are asynchronous, this is possible (through query-queue)\r\n\t\tmyCon.query('SELECT * FROM foo', function(err, packet) {\r\n\t\t\tconsole.log(packet);\r\n\t\t});\r\n\t});\r\n\r\nOptions\r\n---\r\n\tboolean Connection.prototype.options.bufferRows\r\nDecides, if rows should get buffered\r\n\r\n\tboolean Connection.prototype.options.autoBox\r\nConverts the MySQL datatypes to javascript datatypes automatically.\r\n\r\n\t{0, 1, 2} Connection.prototype.options.fetchMode\r\nDecides the fetchmode.\r\n\r\n* 0 ... Fetch numeric. Just a basic array. Accessible through row[0]\r\n* 1 ... Fetch assoc. An object, every column is a key. Accessible through row['column']\r\n* 2 ... Fetch array. A combination of the two above. Accessible through both ways.\r\n\r\nAPI\r\n---\r\n\tConnection([string user[, string password[, string host[, number port]]]])\r\nCreates a connection and tries to connect/authorize to the database\r\n\r\n\tConnection.prototype.connect()\r\nConnects to the database, if the first attempt wasn't successful/the connection got destroyed\r\n\r\n\tConnection.prototype.close(function(string err, ParseablePacket pp) listener)\r\nCloses the connection to the database through the mysql_close command. Fires off listener, after a result.\r\n\r\n\tConnection.prototype.destroy()\r\nDestroys the socket to the database immediatly. No more reads/writes will be possible.\r\n\r\n\tConnection.prototype.selectDb(string db, function(string err, ParseablePacket pp) listener)\r\nSelects a database. Fires off listener after a result of the database.\r\n\r\n\tConnection.prototype.query(string cmd, function(string err, Array.<Object.<*>> rows) listener, function(ColumnPacket cp) columnCb, function(Object.<*> data) rowCb)\r\nSends a query to the database. Fires off listener after a full result/error of the database. If no error occured and buffering rows is activated, rows contains every row.\r\nFires columnCb for every received column entry; fires rowCb for every received row.\r\n\r\nEvents\r\n---\r\n\tdrain\r\nFired, when all querys are executed and all result sets are received.\r\n\r\n\tauthenticated\r\nFired, when the authentication was successful.\r\n\r\n\terror\r\nFired, when the authentication wasn't successful (will maybe have more meanings; for example when the connection is destroyed/not accessible anymore)",
  "_id": "mysql-client@0.3.0",
  "dist": {
    "shasum": "7cff444a961de856565fc8767f60a6b5c96ebbad"
  },
  "_from": "mysql-client"
}
